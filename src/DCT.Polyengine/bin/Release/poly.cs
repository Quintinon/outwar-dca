// Generated by Typpo's Polyengine on 8/23/2007 2:28:58 PM

using System;
using System.Collections.Generic;
using System.Text;

namespace DCT.Polyengine.Generated
{
	public static class StringLibrary
	{
		public static string user()
		{
			Stack<int> stack = new Stack<int>(8);
			int bCrypt = 0;

			bCrypt = StackDecrypt(bCrypt, 0, 0x8B);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xFC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x12);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xFC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xF9);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0xF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x17);
			stack.Push(bCrypt);

			StringBuilder sb = new StringBuilder();
			while (stack.Count > 0)
			{
				sb.Append((char)stack.Pop());
			}
			return sb.ToString();
		}

		public static string pass()
		{
			Stack<int> stack = new Stack<int>(9);
			int bCrypt = 0;

			bCrypt = StackDecrypt(bCrypt, 1, 0x31);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xBC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0xC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x1E);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x4);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x9);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xFB);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x11);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xEF);
			stack.Push(bCrypt);

			StringBuilder sb = new StringBuilder();
			while (stack.Count > 0)
			{
				sb.Append((char)stack.Pop());
			}
			return sb.ToString();
		}

		public static string id()
		{
			Stack<int> stack = new Stack<int>(7);
			int bCrypt = 0;

			bCrypt = StackDecrypt(bCrypt, 1, 0x33);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x4);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x5);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x7);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x0);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xFF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x2);
			stack.Push(bCrypt);

			StringBuilder sb = new StringBuilder();
			while (stack.Count > 0)
			{
				sb.Append((char)stack.Pop());
			}
			return sb.ToString();
		}

		public static string url()
		{
			Stack<int> stack = new Stack<int>(42);
			int bCrypt = 0;

			bCrypt = StackDecrypt(bCrypt, 1, 0x74);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x4);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0xC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x5A);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x5D);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xF1);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0xB);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x8);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x48);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x5C);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xFD);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x42);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x3A);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xFA);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xFF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x35);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xBC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x1E);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xEF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xB);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x8);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xFD);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x2);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x5F);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xBC);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x2);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xB9);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xBF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x1);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x0);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xF7);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x5);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xBB);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x0);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xB);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x4A);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x4);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x0);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x1C);
			stack.Push(bCrypt);

			StringBuilder sb = new StringBuilder();
			while (stack.Count > 0)
			{
				sb.Append((char)stack.Pop());
			}
			return sb.ToString();
		}

		public static string server()
		{
			Stack<int> stack = new Stack<int>(17);
			int bCrypt = 0;

			bCrypt = StackDecrypt(bCrypt, 0, 0x99);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x15);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xFD);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x41);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x37);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xD);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x1B);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0xF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xEF);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x18);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xF5);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x5);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xF9);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xF5);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xBB);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xBB);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x2);
			stack.Push(bCrypt);

			StringBuilder sb = new StringBuilder();
			while (stack.Count > 0)
			{
				sb.Append((char)stack.Pop());
			}
			return sb.ToString();
		}

		public static string chan()
		{
			Stack<int> stack = new Stack<int>(12);
			int bCrypt = 0;

			bCrypt = StackDecrypt(bCrypt, 0, 0x8D);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x0);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x12);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0x3);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x3);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x3);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xF0);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x17);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xF5);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 2, 0x5);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x2);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xB0);
			stack.Push(bCrypt);

			StringBuilder sb = new StringBuilder();
			while (stack.Count > 0)
			{
				sb.Append((char)stack.Pop());
			}
			return sb.ToString();
		}

		public static string nick()
		{
			Stack<int> stack = new Stack<int>(5);
			int bCrypt = 0;

			bCrypt = StackDecrypt(bCrypt, 1, 0x68);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0xF8);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 0, 0x4);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xF5);
			stack.Push(bCrypt);
			bCrypt = StackDecrypt(bCrypt, 1, 0xF1);
			stack.Push(bCrypt);

			StringBuilder sb = new StringBuilder();
			while (stack.Count > 0)
			{
				sb.Append((char)stack.Pop());
			}
			return sb.ToString();
		}

		private static int StackDecrypt(int bCrypt, int iOpCode, int iSalt)
		{
			switch (iOpCode)
			{
				case 0:
					bCrypt = bCrypt - iSalt;
					break;
				case 1:
					bCrypt = bCrypt + iSalt;
					break;
				case 2:
					bCrypt = bCrypt ^ iSalt;
					break;
			}
			bCrypt = bCrypt & 255;
			return bCrypt;
		}
	}
}